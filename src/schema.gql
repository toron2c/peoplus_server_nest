# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AllPostsDto {
  authorId: Int!
  page: Int
}

input AuthDto {
  email: String!
  password: String!
}

input ChangedStateLikeInput {
  postId: Int!
}

type Comment {
  authorId: Int!
  createdAt: DateTime!
  edited: Boolean!
  id: Int!
  text: String!
  updatedAt: DateTime!
}

input CommentCreateInput {
  postId: Int!
  text: String!
}

type CountPosts {
  count: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetCommentsInput {
  postId: Int!
  skip: Int
}

type Mutation {
  changeStatePostLikes(ChangedStateLikeInput: ChangedStateLikeInput!): Int!
  createComment(CreateCommentInput: CommentCreateInput!): Comment!
  createPost(NewPostInput: String!): Post!
  login(AuthDto: AuthDto!): User!
  registration(AuthDto: AuthDto!): User!
  removeComment(RemoveCommentInput: RemoveCommentInput!): Int!
  removePost(RemovePostInput: RemovePostInput!): Int!
  updatePost(UpdatePostDto: UpdatePostInput!): Post!
  updateProfile(ProfileDto: ProfileDto!): Profile!
}

type Post {
  _count: _count!
  authorId: Int!
  createdAt: DateTime!
  edited: Boolean!
  id: Int!
  text: String!
  updatedAt: DateTime
}

type Profile {
  bio: String!
  birthday: DateTime
  id: Int!
  name: String!
}

input ProfileDto {
  bio: String!
  birthday: DateTime!
  name: String!
}

type Query {
  getComments(GetCommentsInput: GetCommentsInput!): [Comment!]!
  getCountPosts(AuthorId: Float!): CountPosts!
  getLikes(postId: Int!): Int!
  getPosts(AllPostsDto: AllPostsDto!): [Post!]!
  getProfile(id: Int!): Profile!
  getUid(email: String!): User!
}

input RemoveCommentInput {
  commentId: Int!
}

input RemovePostInput {
  postId: Int!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

input UpdatePostInput {
  postId: Int!
  text: String!
}

type User {
  tokens: Tokens!
  user: UserFields!
}

type UserFields {
  email: String!
  id: String!
  profileId: Int!
}

type _count {
  likes: Int!
}